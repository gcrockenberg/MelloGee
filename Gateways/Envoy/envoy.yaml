# An example config which accepts HTTP/1 requests over TCP and forwards them to google using HTTP/3
admin:
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901
static_resources:
  listeners:
  - name: listener_0 #http
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 7777
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              # - match:
              #     prefix: "/cof"
              #   route:
              #     #host_rewrite_literal: www.google.com
              #     prefix_rewrite: "/coffee"
              #     cluster: coffee_service
              - match:
                  prefix: "/c/api/v1/catalog"
                route:
                  prefix_rewrite: "/api/v1/catalog"
                  cluster: catalog_service
                typed_per_filter_config:
                  envoy.filters.http.cors:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.CorsPolicy
                    allow_origin_string_match:
                    - contains: localhost
                    - safe_regex:
                        regex: .*\.envoyproxy\.io
                    allow_methods: "*"                    
                    allow_headers: "*"
              - match:
                  prefix: "/b/api/v1/cart"
                route:
                  prefix_rewrite: "/api/v1/cart"
                  cluster: cart_service
                typed_per_filter_config:
                  envoy.filters.http.cors:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.CorsPolicy
                    allow_origin_string_match:
                    - contains: localhost
                    - safe_regex:
                        regex: .*\.envoyproxy\.io
                    allow_methods: "*"
                    allow_headers: "*"
          http_filters:
          - name: envoy.filters.http.cors
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
#  - name: listener_1 # https
#    address:
#      socket_address:
#        protocol: TCP
#        address: 0.0.0.0
#        port_value: 443
#    filter_chains:
#    - transport_socket:
#        name: envoy.transport_sockets.tls
#        typed_config:
#          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
#          common_tls_context:
#            tls_certificates:
#            - certificate_chain:
#                filename: "/etc/ssl/certs/https.crt"
#              private_key:
#                filename: "/etc/ssl/certs/key.pem"
#      filters:
#      - name: envoy.filters.network.http_connection_manager
#        typed_config:
#          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
#          stat_prefix: ingress_http
#          route_config:
#            name: local_route
#            virtual_hosts:
#            - name: local_service
#              domains: ["*"]
#              routes:
#              - match:
#                  prefix: "/c"
#                route:
                  #host_rewrite_literal: www.google.com
#                  prefix_rewrite: "/coffee"
#                  cluster: coffee_service
#                  cluster: secure_coffee_service
#              - match:
#                  prefix: "/t"
#                route:
#                  prefix_rewrite: "/tea"
#                  cluster: tea_service
#          http_filters:
#          - name: envoy.filters.http.router
#            typed_config:
#              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  clusters:
  - name: catalog_service
    connect_timeout: 30s
    type: LOGICAL_DNS
    # Comment out the following line to test on v6 networks
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: catalog_service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: me-catalog-api  # Container name
                port_value: 80        # HTTP behind gateway
  - name: cart_service
    connect_timeout: 30s
    type: LOGICAL_DNS
    # Comment out the following line to test on v6 networks
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: cart_service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: me-cart-api  # Container name
                port_value: 80        # HTTP behind gateway
  # - name: coffee_service
  #   connect_timeout: 30s
  #   type: LOGICAL_DNS
  #   # Comment out the following line to test on v6 networks
  #   dns_lookup_family: V4_ONLY
  #   lb_policy: ROUND_ROBIN
  #   load_assignment:
  #     cluster_name: coffee_service
  #     endpoints:
  #     - lb_endpoints:
  #       - endpoint:
  #           address:
  #             socket_address:
  #               address: coffeeapi
  #               port_value: 80
#  - name: secure_coffee_service
#    connect_timeout: 30s
#    type: LOGICAL_DNS
    # Comment out the following line to test on v6 networks
#    dns_lookup_family: V4_ONLY
#    lb_policy: ROUND_ROBIN
#    load_assignment:
#      cluster_name: secure_coffee_service
#      endpoints:
#      - lb_endpoints:
#        - endpoint:
#            address:
#              socket_address:
#                address: mg-coffee-api # the service name defined in docker-compose.yml
#                port_value: 443
#    typed_extension_protocol_options:
#      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
#        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
#        explicit_http_config:
#          http2_protocol_options:
#            {}
#    transport_socket: # for https only. It will break http routing
#      name: envoy.transport_sockets.tls
#      typed_config:
#        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
#        sni: localhost
    #typed_extension_protocol_options:
    #  envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
    #    "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
    #    explicit_http_config:
    #      http3_protocol_options: {}
    #    common_http_protocol_options:
    #      idle_timeout: 1s
    #transport_socket: # for quic only. It will break other routing
    #  name: envoy.transport_sockets.quic
    #  typed_config:
    #    "@type": type.googleapis.com/envoy.extensions.transport_sockets.quic.v3.QuicUpstreamTransport
    #    upstream_tls_context:
    #      sni: localhost
#  - name: tea_service
#    connect_timeout: 30s
#    type: LOGICAL_DNS
    # Comment out the following line to test on v6 networks
#    dns_lookup_family: V4_ONLY
#    lb_policy: ROUND_ROBIN
#    load_assignment:
#      cluster_name: tea_service
#      endpoints:
#      - lb_endpoints:
#        - endpoint:
#            address:
#              socket_address:
#                address: mg-tea-api # the service name defined in docker-compose.yml
#                port_value: 80
